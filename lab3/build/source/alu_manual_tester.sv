/*
    This file was generated automatically by Alchitry Labs 2.0.29-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alu_manual_tester (
        input wire clk,
        input wire rst,
        input wire [4:0] io_button,
        input wire [2:0][7:0] io_dip,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        output reg [7:0] led
    );
    localparam E_States_FA = 3'h0;
    localparam E_States_LA = 3'h1;
    localparam E_States_FB = 3'h2;
    localparam E_States_LB = 3'h3;
    localparam E_States_IDLE = 3'h4;
    localparam E_States_AUTOTESTER = 3'h5;
    localparam CLK_FREQ = 24'h989680;
    localparam SEVEN_SEG_DIV = 5'h10;
    localparam SLOW_CLOCK_DEFAULT_SPEED = 5'h1c;
    localparam logic [4:0][0:0] _MP_RISE_829164581 = {{1'h1, 1'h1, 1'h1, 1'h1, 1'h1}};
    localparam logic [4:0][0:0] _MP_FALL_829164581 = {{1'h0, 1'h0, 1'h0, 1'h0, 1'h0}};
    logic [4:0] M_io_button_edge_in;
    logic [4:0] M_io_button_edge_out;
    
    genvar idx_0_829164581;
    
    generate
        for (idx_0_829164581 = 0; idx_0_829164581 < 5; idx_0_829164581 = idx_0_829164581 + 1) begin: forLoop_idx_0_829164581
            edge_detector #(
                .RISE(_MP_RISE_829164581[idx_0_829164581]),
                .FALL(_MP_FALL_829164581[idx_0_829164581])
            ) io_button_edge (
                .clk(clk),
                .in(M_io_button_edge_in[idx_0_829164581]),
                .out(M_io_button_edge_out[idx_0_829164581])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][23:0] _MP_CLK_FREQ_442825849 = {{24'h989680, 24'h989680, 24'h989680, 24'h989680, 24'h989680}};
    localparam _MP_MIN_DELAY_442825849 = 5'h14;
    localparam _MP_NUM_SYNC_442825849 = 2'h2;
    logic [4:0] M_io_button_cond_in;
    logic [4:0] M_io_button_cond_out;
    
    genvar idx_0_442825849;
    
    generate
        for (idx_0_442825849 = 0; idx_0_442825849 < 5; idx_0_442825849 = idx_0_442825849 + 1) begin: forLoop_idx_0_442825849
            button_conditioner #(
                .CLK_FREQ(_MP_CLK_FREQ_442825849[idx_0_442825849]),
                .MIN_DELAY(_MP_MIN_DELAY_442825849),
                .NUM_SYNC(_MP_NUM_SYNC_442825849)
            ) io_button_cond (
                .clk(clk),
                .in(M_io_button_cond_in[idx_0_442825849]),
                .out(M_io_button_cond_out[idx_0_442825849])
            );
        end
    endgenerate
    
    
    localparam _MP_DIGITS_104670865 = 3'h4;
    localparam _MP_DIV_104670865 = 5'h10;
    logic [3:0][3:0] M_seg_values;
    logic [6:0] M_seg_seg;
    logic [3:0] M_seg_sel;
    
    multi_seven_seg #(
        .DIGITS(_MP_DIGITS_104670865),
        .DIV(_MP_DIV_104670865)
    ) seg (
        .clk(clk),
        .rst(rst),
        .values(M_seg_values),
        .seg(M_seg_seg),
        .sel(M_seg_sel)
    );
    
    
    logic [2:0] D_states_d, D_states_q = 3'h0;
    logic [31:0] D_alu_a_reg_d, D_alu_a_reg_q = 0;
    logic [31:0] D_alu_b_reg_d, D_alu_b_reg_q = 0;
    logic [4:0] D_counter_d, D_counter_q = 1'h0;
    logic [27:0] D_clock_divider_d, D_clock_divider_q = 1'h0;
    logic D_slow_clock_d, D_slow_clock_q = 1'h0;
    logic D_test_passed_d, D_test_passed_q = 1'h0;
    logic [4:0] D_current_test_index_d, D_current_test_index_q = 1'h0;
    localparam _MP_DIGITS_490650775 = 3'h4;
    localparam _MP_LEADING_ZEROS_490650775 = 1'h1;
    logic [13:0] M_decimal_renderer_value;
    logic [3:0][3:0] M_decimal_renderer_digits;
    
    bin_to_dec #(
        .DIGITS(_MP_DIGITS_490650775),
        .LEADING_ZEROS(_MP_LEADING_ZEROS_490650775)
    ) decimal_renderer (
        .value(M_decimal_renderer_value),
        .digits(M_decimal_renderer_digits)
    );
    
    
    logic [31:0] M_alu_a;
    logic [31:0] M_alu_b;
    logic [5:0] M_alu_alufn;
    logic [31:0] M_alu_out;
    logic M_alu_z;
    logic M_alu_v;
    logic M_alu_n;
    
    alu alu (
        .a(M_alu_a),
        .b(M_alu_b),
        .alufn(M_alu_alufn),
        .out(M_alu_out),
        .z(M_alu_z),
        .v(M_alu_v),
        .n(M_alu_n)
    );
    
    
    localparam logic [31:0][31:0] A_VALUES = {{32'ha, 32'h19, 32'hff, 32'hffffffff, 32'h14, 32'h5, 32'h0, 32'h5, 32'h64, 32'hff00, 32'haaaa, 32'hff00, 32'haaaa, 32'hff00, 32'haaaa, 32'hf0f0, 32'h3241, 32'h1, 32'h5, 32'h10, 32'h64, 32'hf0000000, 32'ha, 32'h5, 32'ha, 32'h5, 32'ha, 32'ha, 32'ha, 32'ha, 32'hffffffff, 32'h5}};
    localparam logic [31:0][31:0] B_VALUES = {{32'h5, 32'h32, 32'h1, 32'h1, 32'h5, 32'h14, 32'h1, 32'ha, 32'h64, 32'hff0, 32'h5555, 32'hff0, 32'h5555, 32'hff0, 32'h5555, 32'hff0, 32'h5555, 32'h4, 32'h2, 32'h2, 32'h3, 32'h4, 32'h5, 32'ha, 32'ha, 32'ha, 32'h5, 32'ha, 32'ha, 32'h5, 32'hffffffff, 32'h5}};
    localparam logic [31:0][5:0] ALUFN_VALUES = {{6'h0, 6'h0, 6'h0, 6'h0, 6'h1, 6'h1, 6'h1, 6'h2, 6'h2, 6'h18, 6'h18, 6'h1e, 6'h1e, 6'h16, 6'h16, 6'h1a, 6'h1a, 6'h20, 6'h20, 6'h21, 6'h21, 6'h23, 6'h37, 6'h37, 6'h37, 6'h35, 6'h35, 6'h35, 6'h33, 6'h33, 6'h33, 6'h0}};
    localparam logic [31:0][31:0] EXPECTED_VALUES = {{32'hf, 32'h4b, 32'h100, 32'h0, 32'hf, 32'hfffffff1, 32'hffffffff, 32'h32, 32'h2710, 32'hf00, 32'h0, 32'hfff0, 32'hffff, 32'hf0f0, 32'hffff, 32'hf0f0, 32'h3241, 32'h10, 32'h14, 32'h4, 32'hc, 32'hff000000, 32'h0, 32'h1, 32'h1, 32'h1, 32'h0, 32'h0, 32'h1, 32'h0, 32'h1, 32'ha}};
    localparam NUM_TESTS = 6'h20;
    logic idk;
    logic [31:0] idk2;
    always @* begin
        D_clock_divider_d = D_clock_divider_q;
        D_slow_clock_d = D_slow_clock_q;
        D_counter_d = D_counter_q;
        D_current_test_index_d = D_current_test_index_q;
        D_test_passed_d = D_test_passed_q;
        D_alu_a_reg_d = D_alu_a_reg_q;
        D_alu_b_reg_d = D_alu_b_reg_q;
        D_states_d = D_states_q;
        
        D_clock_divider_d = D_clock_divider_q + 1'h1;
        D_slow_clock_d = D_slow_clock_q;
        if (D_clock_divider_q == 1'h0) begin
            D_slow_clock_d = ~D_slow_clock_q;
        end
        D_counter_d = D_counter_q;
        D_current_test_index_d = D_current_test_index_q;
        D_test_passed_d = D_test_passed_q;
        led = 8'h0;
        D_alu_a_reg_d = D_alu_a_reg_q;
        D_alu_b_reg_d = D_alu_b_reg_q;
        M_alu_a = D_alu_a_reg_q;
        M_alu_b = D_alu_b_reg_q;
        M_alu_alufn = io_dip[2'h2][3'h5:1'h0];
        M_io_button_cond_in = io_button;
        M_io_button_edge_in = M_io_button_cond_out;
        D_states_d = D_states_q;
        if (io_dip[2'h2][3'h6] == 1'h1) begin
            idk = ~M_alu_out[1'h0];
        end else begin
            idk = M_alu_out[1'h0];
        end
        idk2 = 32'h0;
        io_led = {{8'h0, 8'h0, 8'h0}};
        io_segment = 1'h0;
        io_select = 4'hf;
        io_led[1'h0] = {M_alu_out[3'h7:1'h1], idk};
        io_led[1'h1] = M_alu_out[4'hf:4'h8];
        io_led[2'h2][3'h4:1'h0] = M_alu_out[5'h14:5'h10];
        io_led[2'h2][3'h7] = M_alu_z;
        io_led[2'h2][3'h6] = M_alu_v;
        io_led[2'h2][3'h5] = M_alu_n;
        if (io_dip[2'h2][3'h5:3'h4] == 2'h1) begin
            M_decimal_renderer_value = 1'h0;
        end else begin
            if ((|M_alu_out[5'h1f:4'hc]) == 1'h1) begin
                M_decimal_renderer_value = 14'h270f;
            end else begin
                M_decimal_renderer_value = {M_alu_out[4'hc:1'h1], idk};
            end
        end
        M_seg_values = M_decimal_renderer_digits;
        io_segment = ~M_seg_seg;
        io_select = ~M_seg_sel;
        
        case (D_states_q)
            3'h4: begin
                if (M_io_button_edge_out[1'h0]) begin
                    D_states_d = 3'h1;
                end else begin
                    if (M_io_button_edge_out[2'h2]) begin
                        D_states_d = 3'h0;
                    end else begin
                        if (M_io_button_edge_out[2'h3]) begin
                            D_states_d = 3'h2;
                        end else begin
                            if (M_io_button_edge_out[3'h4]) begin
                                D_states_d = 3'h3;
                            end else begin
                                if (M_io_button_edge_out[1'h1]) begin
                                    D_states_d = 3'h5;
                                    D_current_test_index_d = 1'h0;
                                    D_counter_d = 1'h0;
                                    D_test_passed_d = 1'h1;
                                end else begin
                                    D_states_d = 3'h4;
                                end
                            end
                        end
                    end
                end
            end
            3'h0: begin
                io_led[1'h0] = M_alu_out[3'h7:1'h0];
                io_led[1'h1] = M_alu_out[4'hf:4'h8];
                D_alu_a_reg_d[4'hf:1'h0] = {io_dip[1'h1][3'h7:1'h0], io_dip[1'h0][3'h7:1'h0]};
                if (M_io_button_edge_out[1'h0]) begin
                    D_states_d = 3'h1;
                end else begin
                    if (M_io_button_edge_out[2'h2]) begin
                        D_states_d = 3'h0;
                    end else begin
                        if (M_io_button_edge_out[2'h3]) begin
                            D_states_d = 3'h2;
                        end else begin
                            if (M_io_button_edge_out[3'h4]) begin
                                D_states_d = 3'h3;
                            end else begin
                                if (M_io_button_edge_out[1'h1]) begin
                                    D_states_d = 3'h5;
                                    D_current_test_index_d = 1'h0;
                                    D_counter_d = 1'h0;
                                    D_test_passed_d = 1'h1;
                                end else begin
                                    D_states_d = 3'h4;
                                end
                            end
                        end
                    end
                end
            end
            3'h1: begin
                io_led[1'h0] = M_alu_out[5'h17:5'h10];
                io_led[1'h1] = M_alu_out[5'h1f:5'h18];
                D_alu_a_reg_d[5'h1f:5'h10] = {io_dip[1'h1][3'h7:1'h0], io_dip[1'h0][3'h7:1'h0]};
                if (M_io_button_edge_out[3'h4]) begin
                    D_states_d = 3'h3;
                end else begin
                    if (M_io_button_edge_out[1'h0]) begin
                        D_states_d = 3'h1;
                    end else begin
                        if (M_io_button_edge_out[2'h2]) begin
                            D_states_d = 3'h0;
                        end else begin
                            if (M_io_button_edge_out[2'h3]) begin
                                D_states_d = 3'h2;
                            end else begin
                                D_states_d = 3'h4;
                            end
                        end
                    end
                end
            end
            3'h2: begin
                io_led[1'h0] = M_alu_out[3'h7:1'h0];
                io_led[1'h1] = M_alu_out[4'hf:4'h8];
                D_alu_b_reg_d[5'h1f:5'h10] = {io_dip[1'h1][3'h7:1'h0], io_dip[1'h0][3'h7:1'h0]};
                if (M_io_button_edge_out[1'h0]) begin
                    D_states_d = 3'h1;
                end else begin
                    if (M_io_button_edge_out[2'h3]) begin
                        D_states_d = 3'h2;
                    end else begin
                        if (M_io_button_edge_out[2'h2]) begin
                            D_states_d = 3'h0;
                        end else begin
                            if (M_io_button_edge_out[3'h4]) begin
                                D_states_d = 3'h3;
                            end else begin
                                D_states_d = 3'h4;
                            end
                        end
                    end
                end
            end
            3'h3: begin
                io_led[1'h0] = M_alu_out[5'h17:5'h10];
                io_led[1'h1] = M_alu_out[5'h1f:5'h18];
                D_alu_b_reg_d[4'hf:1'h0] = {io_dip[1'h1][3'h7:1'h0], io_dip[1'h0][3'h7:1'h0]};
                if (M_io_button_edge_out[1'h0]) begin
                    D_states_d = 3'h1;
                end else begin
                    if (M_io_button_edge_out[3'h4]) begin
                        D_states_d = 3'h3;
                    end else begin
                        if (M_io_button_edge_out[2'h2]) begin
                            D_states_d = 3'h0;
                        end else begin
                            if (M_io_button_edge_out[2'h3]) begin
                                D_states_d = 3'h2;
                            end else begin
                                D_states_d = 3'h4;
                            end
                        end
                    end
                end
            end
            3'h5: begin
                io_led[1'h0] = M_alu_out[3'h7:1'h0];
                io_led[1'h1] = M_alu_out[4'hf:4'h8];
                if (D_current_test_index_q < 6'h20) begin
                    M_alu_a = A_VALUES[D_current_test_index_q];
                    M_alu_b = B_VALUES[D_current_test_index_q];
                    M_alu_alufn = ALUFN_VALUES[D_current_test_index_q];
                    idk2 = {M_alu_out[5'h1f:1'h1], idk};
                    if (idk2 == EXPECTED_VALUES[D_current_test_index_q]) begin
                        D_test_passed_d = 1'h1;
                        led = 8'hff;
                    end else begin
                        D_test_passed_d = 1'h0;
                        led = 8'h55;
                    end
                    M_decimal_renderer_value = D_current_test_index_q;
                    if (D_clock_divider_q == 1'h0 && D_slow_clock_q == 1'h0) begin
                        D_current_test_index_d = D_current_test_index_q + 1'h1;
                    end
                end else begin
                    if (D_test_passed_q) begin
                        led = 8'hff;
                    end else begin
                        led = 8'h55;
                    end
                    D_states_d = 3'h4;
                end
                if (M_io_button_edge_out[2'h2]) begin
                    D_states_d = 3'h0;
                end
            end
            default: begin
                D_states_d = 3'h4;
            end
        endcase
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_states_q <= 3'h0;
            D_alu_a_reg_q <= 0;
            D_alu_b_reg_q <= 0;
            D_counter_q <= 1'h0;
            D_clock_divider_q <= 1'h0;
            D_slow_clock_q <= 1'h0;
            D_test_passed_q <= 1'h0;
            D_current_test_index_q <= 1'h0;
        end else begin
            D_states_q <= D_states_d;
            D_alu_a_reg_q <= D_alu_a_reg_d;
            D_alu_b_reg_q <= D_alu_b_reg_d;
            D_counter_q <= D_counter_d;
            D_clock_divider_q <= D_clock_divider_d;
            D_slow_clock_q <= D_slow_clock_d;
            D_test_passed_q <= D_test_passed_d;
            D_current_test_index_q <= D_current_test_index_d;
        end
    end
endmodule