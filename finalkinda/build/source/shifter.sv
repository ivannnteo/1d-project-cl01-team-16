/*
    This file was generated automatically by Alchitry Labs 2.0.29-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn,
        output reg [31:0] shift
    );
    logic [31:0] R_3fae1bd6_i;
    logic [31:0] RR_3fae1bd6_i;
    logic [31:0] R_3a76fbaf_i;
    logic [31:0] RR_3a76fbaf_i;
    logic [31:0] R_5afab706_i;
    logic [31:0] RR_5afab706_i;
    logic [31:0] R_18825217_i;
    logic [31:0] RR_18825217_i;
    localparam _MP_SHIFT_1874653426 = 1'h1;
    logic [31:0] M_shift1_a;
    logic M_shift1_shift;
    logic M_shift1_pad;
    logic [31:0] M_shift1_out;
    
    x_bit_left_shifter #(
        .SHIFT(_MP_SHIFT_1874653426)
    ) shift1 (
        .a(M_shift1_a),
        .shift(M_shift1_shift),
        .pad(M_shift1_pad),
        .out(M_shift1_out)
    );
    
    
    localparam _MP_SHIFT_1946868977 = 2'h2;
    logic [31:0] M_shift2_a;
    logic M_shift2_shift;
    logic M_shift2_pad;
    logic [31:0] M_shift2_out;
    
    x_bit_left_shifter #(
        .SHIFT(_MP_SHIFT_1946868977)
    ) shift2 (
        .a(M_shift2_a),
        .shift(M_shift2_shift),
        .pad(M_shift2_pad),
        .out(M_shift2_out)
    );
    
    
    localparam _MP_SHIFT_476220735 = 3'h4;
    logic [31:0] M_shift4_a;
    logic M_shift4_shift;
    logic M_shift4_pad;
    logic [31:0] M_shift4_out;
    
    x_bit_left_shifter #(
        .SHIFT(_MP_SHIFT_476220735)
    ) shift4 (
        .a(M_shift4_a),
        .shift(M_shift4_shift),
        .pad(M_shift4_pad),
        .out(M_shift4_out)
    );
    
    
    localparam _MP_SHIFT_1194169634 = 4'h8;
    logic [31:0] M_shift8_a;
    logic M_shift8_shift;
    logic M_shift8_pad;
    logic [31:0] M_shift8_out;
    
    x_bit_left_shifter #(
        .SHIFT(_MP_SHIFT_1194169634)
    ) shift8 (
        .a(M_shift8_a),
        .shift(M_shift8_shift),
        .pad(M_shift8_pad),
        .out(M_shift8_out)
    );
    
    
    localparam _MP_SHIFT_1210741315 = 5'h10;
    logic [31:0] M_shift16_a;
    logic M_shift16_shift;
    logic M_shift16_pad;
    logic [31:0] M_shift16_out;
    
    x_bit_left_shifter #(
        .SHIFT(_MP_SHIFT_1210741315)
    ) shift16 (
        .a(M_shift16_a),
        .shift(M_shift16_shift),
        .pad(M_shift16_pad),
        .out(M_shift16_out)
    );
    
    
    logic [31:0] right_shift_a;
    logic arithmetic_fill;
    logic [31:0] s1_out;
    logic [31:0] s2_out;
    logic [31:0] s3_out;
    logic [31:0] s4_out;
    always @* begin
        shift = a;
        right_shift_a = a;
        arithmetic_fill = 1'h0;
        M_shift1_a = a;
        M_shift1_shift = 1'h0;
        M_shift1_pad = 1'h0;
        M_shift2_a = a;
        M_shift2_shift = 1'h0;
        M_shift2_pad = 1'h0;
        M_shift4_a = a;
        M_shift4_shift = 1'h0;
        M_shift4_pad = 1'h0;
        M_shift8_a = a;
        M_shift8_shift = 1'h0;
        M_shift8_pad = 1'h0;
        M_shift16_a = a;
        M_shift16_shift = 1'h0;
        M_shift16_pad = 1'h0;
        s1_out = a;
        s2_out = a;
        s3_out = a;
        s4_out = a;
        
        case (alufn[1'h1:1'h0])
            2'h0: begin
                M_shift1_a = a;
                M_shift1_shift = b[1'h0];
                M_shift1_pad = 1'h0;
                s1_out = M_shift1_out;
                M_shift2_a = s1_out;
                M_shift2_shift = b[1'h1];
                M_shift2_pad = 1'h0;
                s2_out = M_shift2_out;
                M_shift4_a = s2_out;
                M_shift4_shift = b[2'h2];
                M_shift4_pad = 1'h0;
                s3_out = M_shift4_out;
                M_shift8_a = s3_out;
                M_shift8_shift = b[2'h3];
                M_shift8_pad = 1'h0;
                s4_out = M_shift8_out;
                M_shift16_a = s4_out;
                M_shift16_shift = b[3'h4];
                M_shift16_pad = 1'h0;
                shift = M_shift16_out;
            end
            2'h1: begin
                for (RR_3fae1bd6_i = 0; RR_3fae1bd6_i < 6'h20; RR_3fae1bd6_i = RR_3fae1bd6_i + 1) begin
          R_3fae1bd6_i = (0) + RR_3fae1bd6_i * (1);
                    right_shift_a[R_3fae1bd6_i] = a[5'h1f - R_3fae1bd6_i];
                end
                M_shift1_a = right_shift_a;
                M_shift1_shift = b[1'h0];
                M_shift1_pad = 1'h0;
                s1_out = M_shift1_out;
                M_shift2_a = s1_out;
                M_shift2_shift = b[1'h1];
                M_shift2_pad = 1'h0;
                s2_out = M_shift2_out;
                M_shift4_a = s2_out;
                M_shift4_shift = b[2'h2];
                M_shift4_pad = 1'h0;
                s3_out = M_shift4_out;
                M_shift8_a = s3_out;
                M_shift8_shift = b[2'h3];
                M_shift8_pad = 1'h0;
                s4_out = M_shift8_out;
                M_shift16_a = s4_out;
                M_shift16_shift = b[3'h4];
                M_shift16_pad = 1'h0;
                for (RR_3a76fbaf_i = 0; RR_3a76fbaf_i < 6'h20; RR_3a76fbaf_i = RR_3a76fbaf_i + 1) begin
          R_3a76fbaf_i = (0) + RR_3a76fbaf_i * (1);
                    shift[R_3a76fbaf_i] = M_shift16_out[5'h1f - R_3a76fbaf_i];
                end
            end
            2'h3: begin
                arithmetic_fill = a[5'h1f];
                for (RR_5afab706_i = 0; RR_5afab706_i < 6'h20; RR_5afab706_i = RR_5afab706_i + 1) begin
          R_5afab706_i = (0) + RR_5afab706_i * (1);
                    right_shift_a[R_5afab706_i] = a[5'h1f - R_5afab706_i];
                end
                M_shift1_a = right_shift_a;
                M_shift1_shift = b[1'h0];
                M_shift1_pad = arithmetic_fill;
                s1_out = M_shift1_out;
                M_shift2_a = s1_out;
                M_shift2_shift = b[1'h1];
                M_shift2_pad = arithmetic_fill;
                s2_out = M_shift2_out;
                M_shift4_a = s2_out;
                M_shift4_shift = b[2'h2];
                M_shift4_pad = arithmetic_fill;
                s3_out = M_shift4_out;
                M_shift8_a = s3_out;
                M_shift8_shift = b[2'h3];
                M_shift8_pad = arithmetic_fill;
                s4_out = M_shift8_out;
                M_shift16_a = s4_out;
                M_shift16_shift = b[3'h4];
                M_shift16_pad = arithmetic_fill;
                for (RR_18825217_i = 0; RR_18825217_i < 6'h20; RR_18825217_i = RR_18825217_i + 1) begin
          R_18825217_i = (0) + RR_18825217_i * (1);
                    shift[R_18825217_i] = M_shift16_out[5'h1f - R_18825217_i];
                end
            end
            default: begin
                shift = a;
            end
        endcase
    end
    
    
endmodule